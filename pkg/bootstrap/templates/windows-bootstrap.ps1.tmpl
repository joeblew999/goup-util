# Windows Bootstrap Script for goup-util
#
# AUTO-GENERATED by 'goup-util self build'
# Do not edit manually - changes will be overwritten
#
# Usage (as Administrator):
#   iwr https://raw.githubusercontent.com/{{.Repo}}/main/scripts/windows-bootstrap.ps1 -UseBasicParsing | iex

Write-Host "============================================" -ForegroundColor Cyan
Write-Host " goup-util Windows Bootstrap" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan
Write-Host ""

# Check admin
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-not $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "ERROR: Must run as Administrator" -ForegroundColor Red
    exit 1
}

# Install via winget
Write-Host "Installing dependencies..." -ForegroundColor Green
winget install --id Git.Git --exact --silent --accept-source-agreements --accept-package-agreements
winget install --id GoLang.Go --exact --silent --accept-source-agreements --accept-package-agreements
winget install --id Task.Task --exact --silent --accept-source-agreements --accept-package-agreements

# Refresh PATH
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# Download goup-util
Write-Host ""
Write-Host "Installing goup-util..." -ForegroundColor Green

$arch = if ([System.Environment]::Is64BitOperatingSystem) { "amd64" } else { "arm64" }
$binaryName = "goup-util-windows-$arch.exe"

Write-Host "Detecting platform: windows-$arch" -ForegroundColor Gray

try {
    $releaseUrl = "https://api.github.com/repos/{{.Repo}}/releases/latest"
    $release = Invoke-RestMethod -Uri $releaseUrl
    $asset = $release.assets | Where-Object { $_.name -eq $binaryName }

    if (-not $asset) {
        Write-Host "ERROR: Binary not found for windows-$arch" -ForegroundColor Red
        Write-Host "Supported architectures: {{.SupportedArchs}}" -ForegroundColor Yellow
        exit 1
    }

    $installPath = "$env:USERPROFILE\goup-util.exe"
    Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $installPath
    Unblock-File -Path $installPath

    # Add to PATH
    $userPath = [Environment]::GetEnvironmentVariable("Path", "User")
    $installDir = Split-Path $installPath
    if ($userPath -notlike "*$installDir*") {
        [Environment]::SetEnvironmentVariable("Path", "$userPath;$installDir", "User")
        $env:Path = "$env:Path;$installDir"
    }

    Write-Host ""
    Write-Host "âœ“ goup-util installed to: $installPath" -ForegroundColor Green
    Write-Host ""
    Write-Host "Next steps:"
    Write-Host "  goup-util --help"
    Write-Host "  goup-util self upgrade"
    Write-Host ""

} catch {
    Write-Host "ERROR: Failed to download goup-util" -ForegroundColor Red
    Write-Host "Error: $_" -ForegroundColor Red
    exit 1
}
