#!/usr/bin/env bash
# macOS Bootstrap Script for goup-util
#
# AUTO-GENERATED by 'goup-util self build'
# Do not edit manually - changes will be overwritten
#
# Usage:
#   curl -fsSL https://raw.githubusercontent.com/{{.Repo}}/main/scripts/macos-bootstrap.sh | bash
#
# This script downloads the goup-util binary and runs it to install dependencies.
# The binary itself handles: Homebrew, git, go, task installation, and self-installation.

set -euo pipefail

# Globals
TMP_DIR=""

# Cleanup function
cleanup() {
    if [ -n "$TMP_DIR" ] && [ -d "$TMP_DIR" ]; then
        rm -rf "$TMP_DIR"
    fi
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

echo "============================================"
echo " goup-util Bootstrap Installer"
echo "============================================"
echo ""

# Detect architecture
ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        ARCH="amd64"
        ;;
    arm64)
        ARCH="arm64"
        ;;
    *)
        echo "ERROR: Unsupported architecture: $ARCH" >&2
        echo "Supported: {{.SupportedArchs}}" >&2
        exit 1
        ;;
esac

readonly BINARY_NAME="goup-util-darwin-$ARCH"
echo "Platform: darwin-$ARCH"
echo ""

# Create temporary directory
TMP_DIR=$(mktemp -d)
cd "$TMP_DIR"

{{if .UseLocal}}
# LOCAL MODE - Using local binaries for testing
echo "⚠️  LOCAL MODE: Using local binary from {{.LocalBinDir}}"
LOCAL_BINARY="{{.LocalBinDir}}/$BINARY_NAME"

if [ ! -f "$LOCAL_BINARY" ]; then
    echo "ERROR: Local binary not found: $LOCAL_BINARY" >&2
    echo "Run 'go run . self build' first" >&2
    exit 1
fi

echo "Copying local binary..."
cp "$LOCAL_BINARY" goup-util
chmod +x goup-util
{{else}}
# RELEASE MODE - Download from GitHub
echo "Downloading goup-util..."
RELEASE_URL="https://api.github.com/repos/{{.Repo}}/releases/latest"

if ! RELEASE_JSON=$(curl -fsSL "$RELEASE_URL"); then
    echo "ERROR: Failed to fetch release information" >&2
    exit 1
fi

DOWNLOAD_URL=$(echo "$RELEASE_JSON" | grep -o '"browser_download_url": "[^"]*'"$BINARY_NAME"'"' | sed 's/"browser_download_url": "//' | tr -d '"')

if [ -z "$DOWNLOAD_URL" ]; then
    echo "ERROR: Binary not found for darwin-$ARCH" >&2
    echo "Supported architectures: {{.SupportedArchs}}" >&2
    exit 1
fi

if ! curl -fsSL -o goup-util "$DOWNLOAD_URL"; then
    echo "ERROR: Failed to download binary" >&2
    exit 1
fi

chmod +x goup-util
{{end}}

echo ""
echo "Running bootstrap installation..."
echo "This will install: Homebrew, git, go, task, and goup-util"
echo ""

# Run the bootstrap command
# The binary handles all dependency installation and self-installation
if ! ./goup-util {{.SetupCommand}}; then
    echo "" >&2
    echo "ERROR: Bootstrap installation failed" >&2
    exit 1
fi

echo ""
echo "✅ Bootstrap complete!"
echo ""
echo "Run: goup-util --help"
echo ""
