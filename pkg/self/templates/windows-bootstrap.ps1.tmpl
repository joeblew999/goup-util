# Windows PowerShell Bootstrap Script for goup-util
#
# AUTO-GENERATED by 'goup-util self build'
# Do not edit manually - changes will be overwritten
#
# Usage:
#   irm https://raw.githubusercontent.com/{{.Repo}}/main/scripts/windows-bootstrap.ps1 | iex
#
# This script downloads the goup-util binary and runs it to install dependencies.
# The binary itself handles: winget, git, go, task installation, and self-installation.

#Requires -RunAsAdministrator

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"  # Faster downloads

# Cleanup function
function Cleanup {
    if ($Script:TempDir -and (Test-Path $Script:TempDir)) {
        Remove-Item -Path $Script:TempDir -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Register cleanup
$Script:TempDir = $null
Register-EngineEvent PowerShell.Exiting -Action { Cleanup }
trap { Cleanup; break }

Write-Host "============================================" -ForegroundColor Cyan
Write-Host " goup-util Bootstrap Installer" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan
Write-Host ""

# Detect architecture
$arch = $env:PROCESSOR_ARCHITECTURE
$goarch = switch ($arch) {
    "AMD64" { "amd64" }
    "ARM64" { "arm64" }
    default {
        Write-Host "ERROR: Unsupported architecture: $arch" -ForegroundColor Red
        Write-Host "Supported: {{.SupportedArchs}}" -ForegroundColor Red
        exit 1
    }
}

$binaryName = "goup-util-windows-$goarch.exe"
Write-Host "Platform: windows-$goarch"
Write-Host ""

# Create temporary directory
$Script:TempDir = New-Item -ItemType Directory -Path (Join-Path $env:TEMP ([System.IO.Path]::GetRandomFileName()))
Set-Location $Script:TempDir

try {
    {{if .UseLocal}}
    # LOCAL MODE - Using local binaries for testing
    Write-Host "⚠️  LOCAL MODE: Using local binary from {{.LocalBinDir}}" -ForegroundColor Yellow
    $localBinary = "{{.LocalBinDir}}\$binaryName"

    if (-not (Test-Path $localBinary)) {
        Write-Host "ERROR: Local binary not found: $localBinary" -ForegroundColor Red
        Write-Host "Run 'go run . self build' first" -ForegroundColor Red
        exit 1
    }

    Write-Host "Copying local binary..."
    Copy-Item $localBinary "goup-util.exe" -Force
    {{else}}
    # RELEASE MODE - Download from GitHub
    Write-Host "Downloading goup-util..."
    $releaseUrl = "https://api.github.com/repos/{{.Repo}}/releases/latest"

    try {
        $release = Invoke-RestMethod -Uri $releaseUrl -ErrorAction Stop
    } catch {
        Write-Host "ERROR: Failed to fetch release information" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        exit 1
    }

    $asset = $release.assets | Where-Object { $_.name -eq $binaryName }
    if (-not $asset) {
        Write-Host "ERROR: Binary not found for windows-$goarch" -ForegroundColor Red
        Write-Host "Supported architectures: {{.SupportedArchs}}" -ForegroundColor Red
        exit 1
    }

    try {
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "goup-util.exe" -ErrorAction Stop
    } catch {
        Write-Host "ERROR: Failed to download binary" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        exit 1
    }
    {{end}}

    Write-Host ""
    Write-Host "Running bootstrap installation..."
    Write-Host "This will install: winget, git, go, task, and goup-util"
    Write-Host ""

    # Run the self setup command
    # The binary handles all dependency installation and self-installation
    $args = "{{.SetupCommand}}".Split(" ")
    $process = Start-Process -FilePath ".\goup-util.exe" -ArgumentList $args -Wait -PassThru -NoNewWindow

    if ($process.ExitCode -ne 0) {
        Write-Host ""
        Write-Host "ERROR: Bootstrap installation failed" -ForegroundColor Red
        exit $process.ExitCode
    }

    Write-Host ""
    Write-Host "✅ Bootstrap complete!" -ForegroundColor Green
    Write-Host ""
    Write-Host "Run: goup-util --help"
    Write-Host ""

} finally {
    # Cleanup
    Set-Location $HOME
    Cleanup
}
