version: '3'

vars:
  GOUP_UTIL_PATH: "goup-util"  # Use global binary from GOBIN
  
  # Simple project variables - only work when running from project directory
  PROJECT_DIR: "{{.USER_WORKING_DIR}}"
  BIN_DIR: "{{.PROJECT_DIR}}/.bin"

tasks:
  default:
    desc: "Lists all available tasks"
    cmds:
      - echo "Simple Taskfile - Run tasks from within example directories"
      - echo "Current directory {{.PROJECT_DIR}}"
      - echo ""
      - echo "Available Tasks:"
      - task --list

  build:
    desc: "Install goup-util globally"
    cmds:
      - go install .

  # --- SETUP COMMANDS --- #
  setup:android:
    desc: "Set up the default Android development environment"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} setup default-android"

  setup:android:no-emulator:
    desc: "Set up the Android environment without the emulator"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} setup default-android --no-emulator"

  setup:ios:
    desc: "Set up the default iOS development environment"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} setup default-ios"

  # --- SDK MANAGEMENT --- #
  install:
    desc: "Install an individual SDK using goup-util"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} install {{.CLI_ARGS}}"

  list:
    desc: "List available SDKs using goup-util"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} list"

  list:cached:
    desc: "List cached SDKs from download cache using goup-util"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} list --cached"

  cleanup-cache:
    desc: "Remove all installed SDKs and cache using goup-util"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} cleanup-cache"

  # --- PROJECT TASKS (run from example directory) --- #
  clean:
    desc: "Remove build artifacts from current project"
    cmds:
      - rm -rf "{{.BIN_DIR}}"

  gitignore:
    desc: "Check .gitignore status for current project"
    deps: [build]
    cmds:
      - echo "Checking .gitignore for current project"
      - "{{.GOUP_UTIL_PATH}} gitignore {{.PROJECT_DIR}}"

  # --- HIGH-LEVEL BUILD COMMANDS (run from example directory) ---
  build:macos:
    desc: "Build macOS app for current project"
    deps: [build]
    cmds:
      - echo "Building macOS app for current project"
      - "{{.GOUP_UTIL_PATH}} build macos {{.PROJECT_DIR}}"

  build:android:
    desc: "Build Android app for current project"
    deps: [build]
    cmds:
      - echo "Building Android app for current project"
      - "{{.GOUP_UTIL_PATH}} build android {{.PROJECT_DIR}}"

  build:ios:
    desc: "Build iOS app for current project"
    deps: [build]
    cmds:
      - echo "Building iOS app for current project"
      - "{{.GOUP_UTIL_PATH}} build ios {{.PROJECT_DIR}}"

  build:windows:
    desc: "Build Windows app for current project"
    deps: [build]
    cmds:
      - echo "Building Windows app for current project"
      - "{{.GOUP_UTIL_PATH}} build windows {{.PROJECT_DIR}}"

  # --- ICON GENERATION (run from example directory) --- #
  icons:android:
    desc: "Generate Android icons for current project"
    deps: [build]
    cmds:
      - echo "Generating Android icons for current project"
      - "{{.GOUP_UTIL_PATH}} icons android {{.PROJECT_DIR}}"

  icons:ios:
    desc: "Generate iOS icons for current project"
    deps: [build]
    cmds:
      - echo "Generating iOS icons for current project"
      - "{{.GOUP_UTIL_PATH}} icons ios {{.PROJECT_DIR}}"

  icons:windows:
    desc: "Generate Windows icons for current project"
    deps: [build]
    cmds:
      - echo "Generating Windows icons for current project"
      - "{{.GOUP_UTIL_PATH}} icons windows-msix {{.PROJECT_DIR}}"

  icons:macos:
    desc: "Generate macOS icons for current project"
    deps: [build]
    cmds:
      - echo "Generating macOS icons for current project"
      - "{{.GOUP_UTIL_PATH}} icons macos {{.PROJECT_DIR}}"

  icons:all:
    desc: "Generate icons for all platforms for current project"
    cmds:
      - task: icons:android
      - task: icons:ios
      - task: icons:windows
      - task: icons:macos

  # --- RUN COMMANDS (run from example directory) --- #
  run:macos:
    desc: "Build and run macOS app for current project"
    deps: [build:macos]
    cmds:
      - open "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.app"

  # --- LEGACY LOW-LEVEL GIO BUILD COMMANDS --- #
  # These provide direct gogio control but require manual setup
  # Consider using high-level 'build:*' commands instead

  build:gio:macos:
    desc: "Legacy: Build using gogio directly for macOS"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} generate-test-icon {{.PROJECT_DIR}}"
      - mkdir -p "{{.BIN_DIR}}"
      - rm -rf "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.app"
      - gogio -target macos -arch arm64 -icon "{{.PROJECT_DIR}}/icon-source.png" -o "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.app" "{{.PROJECT_DIR}}"

  build:gio:android:
    desc: "Legacy: Build using gogio directly for Android"
    deps: [build, icons:android]
    cmds:
      - mkdir -p "{{.BIN_DIR}}"
      - gogio -target android -o "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.apk" "{{.PROJECT_DIR}}"

  build:gio:ios:
    desc: "Legacy: Build using gogio directly for iOS"
    deps: [build, icons:ios]
    cmds:
      - mkdir -p "{{.BIN_DIR}}"
      - gogio -target ios -o "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.app" "{{.PROJECT_DIR}}"

  build:gio:windows:
    desc: "Legacy: Build using gogio directly for Windows"
    deps: [build]
    cmds:
      - "{{.GOUP_UTIL_PATH}} generate-test-icon {{.PROJECT_DIR}}"
      - mkdir -p "{{.BIN_DIR}}"
      - GOOS=windows GOARCH=arm64 gogio -o "{{.BIN_DIR}}/{{.PROJECT_DIR | base}}.exe" -target windows -icon "{{.PROJECT_DIR}}/icon-source.png" "{{.PROJECT_DIR}}"
