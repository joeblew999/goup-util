# https://taskfile.dev

version: '3'

vars:
  GOUP: go run .
  BASIC_EXAMPLE: examples/gio-basic
  WEBVIEWER_EXAMPLE: examples/gio-plugin-webviewer
  HYPERLINK_EXAMPLE: examples/gio-plugin-hyperlink
  HYBRID_EXAMPLE: examples/hybrid-dashboard
  # CRITICAL: These specific commit hashes are required for compatibility
  # See CLAUDE.md "Gio Version Compatibility" section
  GIO_VERSION: 1a17e9ea3725cf5bcb8bdd363e8c6b310669e936
  GIO_PLUGINS_VERSION: main

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Version management (CRITICAL for compatibility)
  fix-versions:
    desc: Fix Gio version compatibility in all examples
    cmds:
      - echo "Fixing versions in all examples (see CLAUDE.md for details)..."
      - cd {{.BASIC_EXAMPLE}} && go get gioui.org@{{.GIO_VERSION}} && go mod tidy
      - cd {{.WEBVIEWER_EXAMPLE}} && go get gioui.org@{{.GIO_VERSION}} && go get github.com/gioui-plugins/gio-plugins@{{.GIO_PLUGINS_VERSION}} && go mod tidy
      - cd {{.HYPERLINK_EXAMPLE}} && go get gioui.org@{{.GIO_VERSION}} && go get github.com/gioui-plugins/gio-plugins@{{.GIO_PLUGINS_VERSION}} && go mod tidy
      - cd {{.HYBRID_EXAMPLE}} && go get gioui.org@{{.GIO_VERSION}} && go get github.com/gioui-plugins/gio-plugins@{{.GIO_PLUGINS_VERSION}} && go mod tidy
      - echo "Version compatibility fixed. All examples use Gio commit {{.GIO_VERSION}}"

  doctor:
    desc: Check Gio version compatibility in examples
    cmds:
      - echo "Checking Gio versions in all examples..."
      - echo "Expected gioui.org v0.8.1-0.20250526181049-1a17e9ea3725"
      - echo ""
      - echo "gio-basic:"
      - cd {{.BASIC_EXAMPLE}} && grep "gioui.org v" go.mod || echo "OK  No go.mod found"
      - echo "gio-plugin-webviewer:"
      - cd {{.WEBVIEWER_EXAMPLE}} && grep "gioui.org v" go.mod || echo "OK  No go.mod found"
      - echo "gio-plugin-hyperlink:"
      - cd {{.HYPERLINK_EXAMPLE}} && grep "gioui.org v" go.mod || echo "OK  No go.mod found"
      - echo "hybrid-dashboard:"
      - cd {{.HYBRID_EXAMPLE}} && grep "gioui.org v" go.mod || echo "OK  No go.mod found"

  # Development tasks
  dev:
    desc: Build goup-util for development
    cmds:
      - go build -o goup-util .

  test:
    desc: Run tests
    cmds:
      - go test ./...

  # Build goup-util itself
  build:self:
    desc: Build goup-util binaries for all platforms
    cmds:
      - "{{.GOUP}} self build"

  # Example app tasks
  run:hybrid:
    desc: Build and run hybrid-dashboard example (macOS)
    cmds:
      - "{{.GOUP}} build macos {{.HYBRID_EXAMPLE}}"
      - open {{.HYBRID_EXAMPLE}}/.bin/hybrid-dashboard.app

  run:webviewer:
    desc: Build and run webviewer example (macOS)
    cmds:
      - "{{.GOUP}} build macos {{.WEBVIEWER_EXAMPLE}}"
      - open {{.WEBVIEWER_EXAMPLE}}/.bin/gio-plugin-webviewer.app

  run:basic:
    desc: Build and run basic example (macOS)
    cmds:
      - "{{.GOUP}} build macos {{.BASIC_EXAMPLE}}"
      - open {{.BASIC_EXAMPLE}}/.bin/gio-basic.app

  # Build examples for different platforms
  build:hybrid:macos:
    desc: Build hybrid-dashboard for macOS (skips if up-to-date)
    cmds:
      - "{{.GOUP}} build macos {{.HYBRID_EXAMPLE}}"

  build:hybrid:macos:force:
    desc: Force rebuild hybrid-dashboard for macOS
    cmds:
      - "{{.GOUP}} build --force macos {{.HYBRID_EXAMPLE}}"

  build:hybrid:macos:check:
    desc: Check if hybrid-dashboard needs rebuilding (exit 0=no, 1=yes)
    cmds:
      - "{{.GOUP}} build --check macos {{.HYBRID_EXAMPLE}}"

  build:hybrid:ios:
    desc: Build hybrid-dashboard for iOS (skips if up-to-date)
    cmds:
      - "{{.GOUP}} build ios {{.HYBRID_EXAMPLE}}"

  build:hybrid:ios:force:
    desc: Force rebuild hybrid-dashboard for iOS
    cmds:
      - "{{.GOUP}} build --force ios {{.HYBRID_EXAMPLE}}"

  build:hybrid:android:
    desc: Build hybrid-dashboard for Android (skips if up-to-date)
    cmds:
      - "{{.GOUP}} build android {{.HYBRID_EXAMPLE}}"

  build:hybrid:android:force:
    desc: Force rebuild hybrid-dashboard for Android
    cmds:
      - "{{.GOUP}} build --force android {{.HYBRID_EXAMPLE}}"

  build:hybrid:all:
    desc: Build hybrid-dashboard for all platforms
    cmds:
      - task: build:hybrid:macos
      - task: build:hybrid:ios
      - task: build:hybrid:android

  # Build all examples
  build:examples:macos:
    desc: Build all examples for macOS
    cmds:
      - "{{.GOUP}} build macos {{.BASIC_EXAMPLE}}"
      - "{{.GOUP}} build macos {{.WEBVIEWER_EXAMPLE}}"
      - "{{.GOUP}} build macos {{.HYBRID_EXAMPLE}}"

  build:examples:ios:
    desc: Build all examples for iOS
    cmds:
      - "{{.GOUP}} build ios {{.BASIC_EXAMPLE}}"
      - "{{.GOUP}} build ios {{.WEBVIEWER_EXAMPLE}}"
      - "{{.GOUP}} build ios {{.HYBRID_EXAMPLE}}"

  build:examples:android:
    desc: Build all examples for Android
    cmds:
      - "{{.GOUP}} build android {{.BASIC_EXAMPLE}}"
      - "{{.GOUP}} build android {{.WEBVIEWER_EXAMPLE}}"
      - "{{.GOUP}} build android {{.HYBRID_EXAMPLE}}"

  # SDK management
  install:ndk:
    desc: Install Android NDK
    cmds:
      - "{{.GOUP}} install ndk-bundle"

  install:android-sdk:
    desc: Install Android SDK
    cmds:
      - "{{.GOUP}} install android-sdk"

  list:sdks:
    desc: List available SDKs
    cmds:
      - "{{.GOUP}} list"

  # Workspace management
  workspace:init:
    desc: Initialize Go workspace
    cmds:
      - go work init
      - go work use .
      - go work use {{.BASIC_EXAMPLE}}
      - go work use {{.WEBVIEWER_EXAMPLE}}
      - go work use {{.HYBRID_EXAMPLE}}

  workspace:list:
    desc: List workspace modules
    cmds:
      - "{{.GOUP}} workspace list"

  # Icon generation
  icons:hybrid:
    desc: Generate icons for hybrid-dashboard
    cmds:
      - "{{.GOUP}} icons macos {{.HYBRID_EXAMPLE}}"
      - "{{.GOUP}} icons android {{.HYBRID_EXAMPLE}}"
      - "{{.GOUP}} icons ios {{.HYBRID_EXAMPLE}}"

  # Configuration
  config:
    desc: Show goup-util configuration
    cmds:
      - "{{.GOUP}} config"

  # Cleanup
  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BASIC_EXAMPLE}}/.bin
      - rm -rf {{.BASIC_EXAMPLE}}/.build
      - rm -rf {{.WEBVIEWER_EXAMPLE}}/.bin
      - rm -rf {{.WEBVIEWER_EXAMPLE}}/.build
      - rm -rf {{.HYBRID_EXAMPLE}}/.bin
      - rm -rf {{.HYBRID_EXAMPLE}}/.build
      - rm -f goup-util goup-util-*

  clean:all:
    desc: Clean everything including downloaded SDKs
    cmds:
      - task: clean
      - "{{.GOUP}} cleanup"

  # Quick demo workflow
  demo:
    desc: Quick demo - build and run hybrid-dashboard
    cmds:
      - echo "ðŸš€ Building hybrid-dashboard example..."
      - "{{.GOUP}} build macos {{.HYBRID_EXAMPLE}}"
      - echo "Build complete! Launching app..."
      - open {{.HYBRID_EXAMPLE}}/.bin/hybrid-dashboard.app
      - echo "ðŸ’¡ The app should now be running on your screen!"
      - echo "ðŸ“Š Watch the real-time stats update"
      - echo "ðŸ”— Click 'Call Go Function' to test the bridge"

  # Full test workflow
  test:all:
    desc: Build and test all examples on all platforms
    cmds:
      - echo "Building for macOS..."
      - task: build:examples:macos
      - echo "Building for iOS..."
      - task: build:examples:ios
      - echo "Building for Android..."
      - task: build:examples:android
      - echo "All examples built successfully!"

  # Development setup
  setup:
    desc: Initial setup for development
    cmds:
      - echo "Setting up goup-util development environment..."
      - task: workspace:init
      - echo "Installing Android NDK..."
      - task: install:ndk
      - echo "Setup complete! Try task demo"

  # Screenshot commands (using robotgo - requires CGO)
  screenshot:
    desc: Take a screenshot using robotgo (requires Screen Recording permission)
    cmds:
      - CGO_ENABLED=1 go run . screenshot screenshot.png
      - echo "Screenshot saved to screenshot.png"

  screenshot:region:
    desc: Capture a screen region
    cmds:
      - CGO_ENABLED=1 go run . screenshot --x 100 --y 100 -w 800 -H 600 screenshot-region.png
      - echo "Region screenshot saved to screenshot-region.png"

  screenshot:delay:
    desc: Take screenshot with 3 second delay (useful for menus)
    cmds:
      - CGO_ENABLED=1 go run . screenshot --delay 3000 screenshot-delayed.png

  screenshot:info:
    desc: Show display information
    cmds:
      - CGO_ENABLED=1 go run . screenshot --info

  screenshot:all:
    desc: Capture all displays
    cmds:
      - CGO_ENABLED=1 go run . screenshot --all --prefix display

  # Build goup-util with robotgo
  build:with-screenshot:
    desc: Build goup-util with robotgo screenshot support (requires CGO)
    cmds:
      - echo "Building with robotgo support (CGO enabled)..."
      - CGO_ENABLED=1 go build -o goup-util .
      - echo "Built goup-util with screenshot features"
      - echo "Usage - ./goup-util screenshot --info"

  # Bundle commands (create app bundles with signing)
  bundle:hybrid:macos:
    desc: Create signed macOS app bundle for hybrid-dashboard
    cmds:
      - "{{.GOUP}} bundle macos {{.HYBRID_EXAMPLE}}"

  # Package for macOS with code signing (DEPRECATED - use bundle command)
  package:macos:
    desc: Build and package goup-util as a signed macOS app bundle (DEPRECATED)
    cmds:
      - bash pkg/packaging/deprecated/build-macos.sh
      - echo ""
      - echo "Packaged app is ready in .dist/goup-util.app"
      - echo "To install - open .dist/goup-util.app"
      - echo ""
      - echo "NOTE - This task uses the old bash script."
      - echo "Use the bundle command instead - task bundle:hybrid:macos"

  # Create DMG for distribution
  package:macos:dmg:
    desc: Create a DMG installer for macOS
    deps: [package:macos]
    cmds:
      - echo "Creating DMG..."
      - hdiutil create -volname "goup-util" -srcfolder .dist -ov -format UDZO .dist/goup-util.dmg
      - echo "DMG created at .dist/goup-util.dmg"

  # Test screenshot features
  test:screenshot:
    desc: Test screenshot features
    cmds:
      - echo "Testing screenshot functionality..."
      - CGO_ENABLED=1 go run . screenshot --info
      - echo "Taking test screenshot..."
      - CGO_ENABLED=1 go run . screenshot test-screenshot.png
      - ls -lh test-screenshot.png
      - echo "Screenshot test complete"

  # Documentation screenshots for README
  docs:screenshots:
    desc: Capture screenshots for documentation
    cmds:
      - echo "Capturing app screenshots for docs..."
      - mkdir -p docs/screenshots
      - task: run:hybrid
      - echo "Waiting 2 seconds for app to launch..."
      - sleep 2
      - "{{.GOUP}} screenshot --delay 1000 docs/screenshots/hybrid-dashboard-macos.png"
      - echo "OK Screenshots saved to docs/screenshots/"
      - echo "Remember to update README.md with new screenshots!"

  # CI/CD tasks leveraging idempotency
  ci:check:
    desc: Check if any examples need rebuilding (for CI/CD)
    cmds:
      - echo "Checking build status for all examples..."
      - "{{.GOUP}} build --check macos {{.HYBRID_EXAMPLE}} && echo 'hybrid: up-to-date' || echo 'hybrid: needs rebuild'"
      - "{{.GOUP}} build --check macos {{.WEBVIEWER_EXAMPLE}} && echo 'webviewer: up-to-date' || echo 'webviewer: needs rebuild'"
      - "{{.GOUP}} build --check macos {{.BASIC_EXAMPLE}} && echo 'basic: up-to-date' || echo 'basic: needs rebuild'"

  ci:build:
    desc: Build all examples (only if needed) - idempotent
    cmds:
      - echo "Building all examples (skipping if up-to-date)..."
      - "{{.GOUP}} build macos {{.HYBRID_EXAMPLE}}"
      - "{{.GOUP}} build macos {{.WEBVIEWER_EXAMPLE}}"
      - "{{.GOUP}} build macos {{.BASIC_EXAMPLE}}"
      - echo "Build complete (used cache where possible)"

  ci:build:force:
    desc: Force rebuild all examples - ignores cache
    cmds:
      - echo "Force rebuilding all examples..."
      - "{{.GOUP}} build --force macos {{.HYBRID_EXAMPLE}}"
      - "{{.GOUP}} build --force macos {{.WEBVIEWER_EXAMPLE}}"
      - "{{.GOUP}} build --force macos {{.BASIC_EXAMPLE}}"
      - echo "All examples rebuilt from scratch"

  # Release workflow
  release:prepare:
    desc: Prepare for release (commit all changes)
    cmds:
      - echo "Checking git status..."
      - git status --short
      - echo ""
      - echo "Ready to commit? (Ctrl+C to cancel, Enter to continue)"
      - 'read -p "Commit message: " MSG && git add -A && git commit -m "$MSG"'
      - echo "Committed. Ready to push and tag."

  release:create:
    desc: Create and push a new release tag
    cmds:
      - echo "Current tags:"
      - git tag -l | tail -5
      - echo ""
      - echo "Enter new version (e.g., v0.1.0):"
      - 'read -p "Version: " VERSION && git tag -a "$VERSION" -m "Release $VERSION" && git push origin main && git push origin "$VERSION"'
      - echo ""
      - echo "Tag $VERSION pushed! GitHub Actions will build binaries."
      - 'echo "Check: https://github.com/joeblew999/goup-util/actions"'

  release:full:
    desc: Full release workflow (commit, tag, push)
    cmds:
      - task: release:prepare
      - task: release:create
      - echo ""
      - echo "Release in progress!"
      - 'echo "Monitor: https://github.com/joeblew999/goup-util/actions"'
      - echo ""
      - echo "After release completes, test bootstrap:"
      - 'echo "  task bootstrap:test:macos"'

  # Bootstrap testing
  bootstrap:test:macos:
    desc: Test macOS bootstrap script (downloads latest release)
    cmds:
      - echo "Testing macOS bootstrap script..."
      - echo "This will install goup-util to /usr/local/bin/goup-util"
      - echo ""
      - echo "WARNING - This will download and run the bootstrap script!"
      - echo "Ctrl+C to cancel, Enter to continue"
      - 'read -p "Continue? "'
      - bash scripts/macos-bootstrap.sh

  bootstrap:test:macos:local:
    desc: Test macOS bootstrap script locally (without download)
    cmds:
      - echo "Testing local bootstrap script..."
      - bash -x scripts/macos-bootstrap.sh

  bootstrap:info:
    desc: Show bootstrap script URLs and installation locations
    cmds:
      - echo "Bootstrap Script URLs:"
      - echo ""
      - echo "macOS:"
      - 'echo "  curl -fsSL https://raw.githubusercontent.com/joeblew999/goup-util/main/scripts/macos-bootstrap.sh | bash"'
      - echo ""
      - echo "Windows:"
      - 'echo "  iwr https://raw.githubusercontent.com/joeblew999/goup-util/main/scripts/windows-bootstrap.ps1 -UseBasicParsing | iex"'
      - echo ""
      - echo "Installation Locations:"
      - 'echo "  macOS - /usr/local/bin/goup-util"'
      - 'echo "  Windows - %USERPROFILE%\\goup-util.exe"'
      - echo ""
      - echo "After install, update with:"
      - echo "  goup-util self upgrade"

  # UTM VM automation
  utm:list:
    desc: List all UTM virtual machines
    cmds:
      - go run . utm list

  utm:status:
    desc: Get status of Windows VM
    cmds:
      - go run . utm status "Windows 11"

  utm:start:
    desc: Start Windows VM
    cmds:
      - go run . utm start "Windows 11"

  utm:stop:
    desc: Stop Windows VM
    cmds:
      - go run . utm stop "Windows 11"

  utm:test:build:
    desc: Test Windows build in VM
    cmds:
      - go run . utm exec "Windows 11" -- build windows examples/hybrid-dashboard

  utm:test:bundle:
    desc: Test Windows bundle in VM
    cmds:
      - go run . utm exec "Windows 11" -- bundle windows examples/hybrid-dashboard

  utm:test:task:
    desc: Run a task in Windows VM
    cmds:
      - go run . utm task "Windows 11" build:hybrid:windows

  utm:pull:msix:
    desc: Pull MSIX from Windows VM
    cmds:
      - go run . utm pull "Windows 11" "C:\\Users\\User\\goup-util\\examples\\hybrid-dashboard\\.bin\\hybrid-dashboard.msix" ./artifacts/hybrid-dashboard.msix
